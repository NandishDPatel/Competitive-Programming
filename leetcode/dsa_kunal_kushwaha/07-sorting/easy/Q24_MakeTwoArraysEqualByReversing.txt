//beats 22% only 
class Solution {
   public static boolean canBeEqual(int[] target, int[] arr){
        HashMap<Integer,Integer> map = new HashMap<>();
        for(int i=0;i<target.length;i++){
            if(!map.containsKey(target[i])){
                map.put(target[i],1);
            } else{
                map.put(target[i],map.get(target[i])+1);
            }
        }
        // System.out.println(map);
        for(int j=0;j<arr.length;j++){
            if(map.containsKey(arr[j]) && map.get(arr[j])!=0){
                map.replace(arr[j],map.get(arr[j]),map.get(arr[j])-1);
            } else{
                // System.out.println("False");
                return false;
            }
        }
        // System.out.println(map);
        // System.out.println("True");
        return true;
    }
}

//beats 86%
class Solution {
    public boolean canBeEqual(int[] target, int[] arr) {
        Arrays.sort(target);
        Arrays.sort(arr);
        for(int i=0;i<target.length;i++){
            if(target[i]!=arr[i]){
                return false;
            }
        }
        return true;
    }
}

//beats 90%
class Solution {
    public boolean canBeEqual(int[] target, int[] arr) {
        int chk[] = new int[1001];
        for(int i=0;i<target.length;i++){
            chk[target[i]] += 1;
            chk[arr[i]] -= 1;
        }
        for(int i=0;i<chk.length;i++){
            if(chk[i]!=0){
                return false;
            }
        }
        return true;
    }
}




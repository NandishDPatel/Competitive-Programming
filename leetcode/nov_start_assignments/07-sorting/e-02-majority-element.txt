//169 - 54%
class Solution {
    public int majorityElement(int[] nums) {
        Arrays.sort(nums);
        return nums[nums.length/2];
    }
}

//17%
class Solution {
    public int majorityElement(int[] nums) {
        HashMap<Integer,Integer> map = new HashMap<>();
        for(int i=0;i<nums.length;i++){
             map.put(nums[i], map.getOrDefault(nums[i], 0) + 1);
            if(map.get(nums[i])>nums.length/2){
                return nums[i];
            }
        }
        return -1;
    }
}

//99%
class Solution {
    public int majorityElement(int[] nums) {
        int count = 0;
        int prev = 0;
        for(int i=0;i<nums.length;i++){
        if(count==0){
            prev = nums[i];
        }
        if(prev==nums[i]){
            count++;
        } else{
            count--;
        }
      }   
      return prev;
    }
}
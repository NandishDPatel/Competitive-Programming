//beats 21% users only :(
class Solution {
    public int[] searchRange(int[] nums, int target){
        if(nums.length==0){
            return new int[]{-1,-1};
        }
        int result[] = new int[2];
        result[0] = lowerIndex(nums,target);
        result[1] = higherIndex(nums,target);
        return result;
    }

    public int lowerIndex(int[] nums,int target){
            int low = 0;
            int high = nums.length-1;
            while(low<=high){
                int mid = (high+(high-low))/2;
                if(nums[mid]==target){
                    if(mid==0 || nums[mid-1]!=target){
                        return mid;
                    } else {
                        high = mid-1;
                    }
                } else if (nums[mid]>target) {
                    high = mid-1;
                } else{
                    low = mid+1;
                }
            }
            return -1;
    }
    public int higherIndex(int[] nums,int target){
        int low = 0;
        int high = nums.length-1;
        while(low<=high){
            int mid = (high+(high-low))/2;
            if(nums[mid]==target){
                if(mid==nums.length-1 || nums[mid+1]!=target){
                    return mid;
                } else {
                    low = mid+1;
                }
            } else if (nums[mid]>target) {
                high = mid-1;
            } else{
                low = mid+1;
            }
        }
        return -1;
    }
}


//beats 100% users
class Solution {
    public int[] searchRange(int[] nums, int target) {
        int[] arr = {-1,-1};
        int start = 0;
        int end = nums.length-1;
        int mid = 0;

        while(start<=end){
            mid = start + (end-start)/2;

            if(nums[mid] == target){
                arr[0] = mid;
                end = mid -1;
            }
            else if(nums[mid] > target){
                end = mid - 1;
            }else{
                start = mid + 1;
            }
        }
        start = 0;
        end = nums.length - 1;

       while(start <= end){
        mid = start + (end-start)/2;
        if(nums[mid] == target){
            arr[1] = mid;
            start = mid +1;
        }
        else if(nums[mid] < target){
          start = mid + 1;
        }else{
          end = mid -1;
        }
      }
        return arr;
    }
}

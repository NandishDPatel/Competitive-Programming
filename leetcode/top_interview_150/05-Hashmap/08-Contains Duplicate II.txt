//beats 25% users :(
class Solution {
    public boolean containsNearbyDuplicate(int[] nums, int k) {
        HashMap<Integer,Integer> map = new HashMap<>();
        for(int i=0;i<nums.length;i++){
            if(!map.containsKey(nums[i])){
                map.put(nums[i],i);
            } else{
                if(((i-map.get(nums[i])))<=k){
                    return true;
                } else{
                    map.put(nums[i],i);
                }
            }
        }
        return false;
    }
}

//beats 57% users
class Solution {
    public boolean containsNearbyDuplicate(int[] nums, int k) {
        HashMap<Integer,Integer> map = new HashMap<>();
        for(int i=0;i<nums.length;i++){
            if(!map.containsKey(nums[i])){
                map.put(nums[i],i);
            } else{
                if(((i-map.get(nums[i])))<=k){
                    return true;
                } else{
                    map.replace(nums[i],i);
                }
            }
        }
        return false;
    }
}

//beats 89% users
class Solution {
    public boolean containsNearbyDuplicate(int[] nums, int k) {
        HashMap<Integer,Integer> map = new HashMap<>();
        for(int i=0;i<nums.length;i++){
            if(!map.containsKey(nums[i])){
                map.put(nums[i],i);
            } else{
                if(((i-map.get(nums[i])))>k){
                    map.replace(nums[i],i);
                } else{
                    return true;
                }
            }
        }
        return false;
    }
}

//beats 97% users - leetcode Solution
class Solution {
    public boolean containsNearbyDuplicate(int[] nums, int k) {
        HashSet<Integer> set = new HashSet<>();
        int x = 0;
        for(int i=0; i<nums.length; i++){
            if(set.size() > k) set.remove(nums[x++]);
            if(!set.add(nums[i])) return true;
        }
        return false;
    }
}

//beats 73% users
class Solution {
    public boolean isPalindrome(String s) {
        int k = 0;
        StringBuilder sb = new StringBuilder();
        while (k < s.length()) {
            char ch = s.charAt(k);
            if (Character.isLetterOrDigit(ch)) {
                sb.append(Character.toLowerCase(ch));
            }
            k++;
        }
        String temp = sb.toString();
        int i = 0;
        int j = temp.length() - 1;
        while (i < j) {
            if (temp.charAt(i) == temp.charAt(j)) {
                i++;
                j--;
            } else {
                return false;
            }
        }
        return true;
    }
}

//beats 55% users only
class Solution {
    public boolean isPalindrome(String s) {
        int i = 0;
        int j = s.length()-1;
        while (i<j) {
            char ch1 = s.charAt(i);
            char ch2 = s.charAt(j);
            if(!Character.isLetterOrDigit(ch1)){
                i++;
            }
            if(!Character.isLetterOrDigit(ch2)){
                j--;
            }
            if (Character.isLetterOrDigit(ch1) && Character.isLetterOrDigit(ch2)) {
                if(Character.toLowerCase(ch1)!=Character.toLowerCase(ch2)){
                    return false;
                }
                i++;
                j--;
            }
        }
        return true;
    }
}

//beats 98% users
class Solution {
    public boolean isPalindrome(String s) {
        int i = 0;
        int j = s.length() - 1;
        while (i < j) {
            char ch1 = s.charAt(i);
            char ch2 = s.charAt(j);
            if (!Character.isLetterOrDigit(ch1)) {
                i++;
            } else if (!Character.isLetterOrDigit(ch2)) {
                j--;
            } else {
                    if (Character.toLowerCase(ch1) != Character.toLowerCase(ch2)) {
                        return false;
                    }
                    i++;
                    j--;
            }

        }
        return true;
    }
}

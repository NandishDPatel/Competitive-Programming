//beats only 25% users :(  and 5.8% memory wise
class Solution {
    public static String freqAlphabets(String s) {
        String ans = "";
        int i = s.length()-1;
//        String temp = null;
        while(i>=0){
            char ch = s.charAt(i);
            if(ch == '#'){
                //i--; //#
                int zerosDig = s.charAt(i-1)-'0'; //'1'
                int onesDig = (s.charAt(i-2)-'0')*10;//'1'
                int totalNum = zerosDig + onesDig;//11 as number
//                System.out.println(totalNum);
//                int num = Integer.parseInt(temp); //10-26
                char addCh = (char)(totalNum+96);
                ans += addCh;
//                temp = null;
                i-=3;
            } else{
                int int1 = ch - '0';
//                char addChar = ;
                char addCh = (char)(int1 + 96);
                ans += addCh;
                --i;
            }
        }
        String retAns = "";
        for (i=ans.length()-1;i>=0;i--){
            retAns += ans.charAt(i);
        }

        return retAns;
    }
}

//beats 79% users
class Solution {
    public static String freqAlphabets(String s) {
        StringBuilder ans = new StringBuilder();
        int i = s.length()-1;
        while(i>=0){
            char ch = s.charAt(i);
            if(ch == '#'){
                // int zerosDig = ; //'1'
                // int onesDig = ;//'1'
                int totalNum = (s.charAt(i-1)-'0' + (s.charAt(i-2)-'0')*10);//11 as number
                char addCh = (char)(totalNum+96);
                ans.append(addCh);
                i-=3;
            } else{
                int int1 = ch - '0';
                char addCh = (char)(int1 + 96);
                ans.append(addCh);
                --i;
            }
        }
        StringBuilder retAns = new StringBuilder();
        for (i=ans.length()-1;i>=0;i--){
            retAns = retAns.append(ans.charAt(i));
        }

        return retAns.toString();

    }
}

//sometimes beats 78% and sometimes beats 100% of the users
class Solution {
    public static String freqAlphabets(String s) {
    StringBuilder ans = new StringBuilder();
       for(int i = s.length()-1;i>=0;i--){
           int number;
            char ch = s.charAt(i);
            if(ch == '#'){
                number = (s.charAt(i-1)-'0' + (s.charAt(i-2)-'0')*10);//11 as number
                i-=2;
            } else{
                number = ch-'0'; //for single digit
            }
             ans.append((char)(number+96));
        }
        return ans.reverse().toString();

    }
}

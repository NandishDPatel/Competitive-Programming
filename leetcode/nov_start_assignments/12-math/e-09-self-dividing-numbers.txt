//728 - 33%
class Solution {
    public List<Integer> selfDividingNumbers(int left, int right) {
        List<Integer> result = new ArrayList<>();
        while(left<=right){
            int temp = left;
            if(temp<10){
                result.add(temp);
            } else{
                boolean addNum = true;
                while(temp>0){
                    int digit = temp%10;
                    if(digit==0){
                        addNum = false;
                        break;
                    }
                    if(left%digit!=0){
                        addNum = false;
                        break;
                    }
                    temp = temp/10;
                }
                if(addNum){
                    result.add(left);
                }
            }
            left++;
        }
        return result;
    }
}

//78% -= same logic as above but still showing lesser time :(
class Solution {
  public List<Integer> selfDividingNumbers(int left, int right) {
    List<Integer> ans = new ArrayList<>();

    for (int num = left; num <= right; ++num)
      if (dividingNumber(num))
        ans.add(num);

    return ans;
  }

  private boolean dividingNumber(int num) {
    for (int n = num; n > 0; n /= 10)
      if (n % 10 == 0 || num % (n % 10) != 0)
        return false;
    return true;
  }
}
//beats 46% users
class Solution {
    public int getMinimumDifference(TreeNode root) {
        ArrayList<Integer> temp1 = new ArrayList<>();
        ArrayList<Integer> res = new ArrayList<>();
        res = inorderTraversalHelper(root,temp1);
        int temp[] = new int[res.size()];
        int i = 0;
        int ans = 100001;
        for(Integer val : res){
            temp[i++] = val;
        }
        for(i=1;i<temp.length;i++){
            if(temp[i]-temp[i-1]<ans){
                ans = temp[i]-temp[i-1];
            }
        }
        return ans;
    }
    public ArrayList<Integer> inorderTraversalHelper(TreeNode root,ArrayList<Integer> list){
        if(root==null){
            return list;
        }
        inorderTraversalHelper(root.left, list);
        list.add(root.val);
        inorderTraversalHelper(root.right, list); 
        return list;         
    }
}

//beats 100% users
class Solution {
     private Integer prev = null;
    private int minDiff = Integer.MAX_VALUE;
    
    public int getMinimumDifference(TreeNode root) {
        inorderTraversal(root);
        return minDiff;
    }

    private void inorderTraversal(TreeNode node) {
        if (node == null) {
            return;
        }
        
        inorderTraversal(node.left);
        
        if (prev != null) {
            minDiff = Math.min(minDiff, node.val - prev);
        }
        prev = node.val;
        
        inorderTraversal(node.right);
    }
}
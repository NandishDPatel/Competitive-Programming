/*not working below code for all test cases :(*/
/*
class Solution {
    public int[] twoSum(int[] numbers, int target) {
        int j = cutArr(numbers,target);
        int i = 0;
        while(numbers[i]+numbers[j]!=target){
            if(numbers[i]+numbers[j]<target){
                i++;
            } else if(numbers[i]+numbers[j]>target){
                j--;
            } else{
                break;
            }
        }
        return new int[]{i+1,j+1};
    }


    public int cutArr(int[] arr,int target){
        int low=0,high=arr.length-1,mid=-1;
        while(low<=high){
            mid = low + (high-low)/2;
            if(mid==arr.length-1 && arr[mid]<target){
                return mid;
            } 
            if(mid!=0 && arr[mid]>target && arr[mid-1]<=target){
                return mid-1;
            } else if( mid!=0 && arr[mid]>target && arr[mid-1]>target){
                high = mid-1;
            } else if(arr[mid]<=target && arr[mid+1]>target && mid!=arr.length-1){
                return mid;
            } else{
                low = mid+1;
            }
        }
        return mid;
    }
}
*/



/*below is working code for the problem*/
/*
class Solution {
    public int[] twoSum(int[] numbers, int target) {
        int i = 0;
        int j = numbers.length-1;
        boolean ans = true;
        while(ans){
            if(numbers[i]+numbers[j]==target){
                break;
            } else if(numbers[i]+numbers[j]<target){
                i++;
            } else{
                j--;
            }
        }
        return new int[]{i+1,j+1};
    }
}
*/
//beats 23% users
class Solution {
    public int majorityElement(int[] nums) {
        HashMap<Integer,Integer> map = new HashMap<>();
        int target = nums.length/2;
        for(int i=0;i<nums.length;i++){
            map.put(nums[i],map.getOrDefault(nums[i],0)+1);
            if(map.get(nums[i])>target){
                return nums[i];
            }
        }
        return -1;
    }
}

//beats 41% users
class Solution {
    public int majorityElement(int[] nums) {
        int target = nums.length/2;
        Arrays.sort(nums);
        int tempC = 1;
        int prev = nums[0];
        for(int i=1;i<nums.length;i++){
            if(nums[i]==prev){
                tempC++;
                if(tempC>target){
                    return prev;
                }
            } else{
                tempC = 1;
                prev = nums[i];
            }
        }
        return prev;
    }
}

//beats 54% users
class Solution {
    public int majorityElement(int[] nums) {
        if(nums.length==1){
            return nums[0];
        }
        int target = nums.length/2;
        Arrays.sort(nums);
        return nums[target];
    }
}

//beats 61.77% users
class Solution {
    public int majorityElement(int[] nums) {
        Arrays.sort(nums);
        return nums[nums.length/2];
    }
}

//beats 99% users - leetcode solution (Moore Voting Algorithm)
class Solution {
    public int majorityElement(int[] nums) {
        int count = 0;
        int candidate = 0;
        for(int num : nums){
            if(count==0){
                candidate = num;
            }
            if(num == candidate){
                count++;
            } else{
                count--;
            }
        }
        return candidate;
    }
}

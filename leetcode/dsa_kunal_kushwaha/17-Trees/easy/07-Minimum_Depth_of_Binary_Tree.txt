//beats 78.82% users
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int minDepth(TreeNode root) {
        if(root==null){
            return 0;
        }
        return depthHelper(root);
    }

    public int depthHelper(TreeNode root){
            if(root != null && root.left == null && root.right==null){
                return 1;
            } if (root == null){
                return 10000;
            }

            int left_tree = depthHelper(root.left)+1;
            int right_tree = depthHelper(root.right)+1;
            return Math.min(left_tree,right_tree);
    }
}

//same runtim but more efficient solution
class Solution {
    public int minDepth(TreeNode root) {
        if(root==null){
            return 0;
        }
        return depthHelper(root);
    }

    public int depthHelper(TreeNode root){
            if (root == null){
                return 0;
            }
            int leftDepth = minDepth(root.left);
            int rightDepth = minDepth(root.right);
            if(root.left == null && root.right == null){
                return 1;
            }
            if(root.left == null){
                return 1+rightDepth;
            }
            if(root.right == null){
                return 1+leftDepth;
            }
            return Math.min(leftDepth,rightDepth)+1;
    }
}

class Solution {
    public boolean findRotation(int[][] mat, int[][] target) {
        int rotationAttempts = 0;

        while (rotationAttempts < 4) {
            if (isMatch(mat, target)) {
                return true;
            }

            rotateMatrix(mat);
            rotationAttempts++;
        }

        return false;
    }

    public void rotateMatrix(int[][] matrix) {
        int n = matrix.length;

        int[][] rotatedMatrix = new int[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                rotatedMatrix[j][n - i - 1] = matrix[i][j];
            }
        }

        // Copy the rotated matrix back to the original matrix
        for (int i = 0; i < n; i++) {
            System.arraycopy(rotatedMatrix[i], 0, matrix[i], 0, n);
        }
    }

    public boolean isMatch(int[][] matrix, int[][] target) {
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix[0].length; j++) {
                if (matrix[i][j] != target[i][j]) {
                    return false;
                }
            }
        }
        return true;
    }
}